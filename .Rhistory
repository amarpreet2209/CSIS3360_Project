knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("fastDummies")
# install.packages("adabag")
# install.packages("ada")
# install.packages("xgboost")
# install.packages("neuralnet")
# install.packages("e1071")  # svm
# install.packages("naivebayes")
# install.packages("rpart")  # decision tree
# install.packages(rpart.plot)
# install.packages("broom")
# install.packages("data.table")
library(dplyr)
library(fastDummies)
library(ggplot2)
library(caret)
library(randomForest)
library(MASS)
library(data.table)
library(ada)
library(adabag)
library(xgboost)
library(neuralnet)
library(e1071)
library(naivebayes)
library(rpart)
library(rpart.plot)
library(broom)
library(AICcmodavg)
data_org <- read.csv("ObesityDataSet.csv", header = TRUE, sep = ',')
head(data,2)
cat("Initially the dataset has", dim(data)[1], "rows")
data <- data_org %>%
rename(
Consumes_High_Cal_food = FAVC,
Veg_consumption_Group = FCVC,
Num_main_meals = NCP,
Consumption_Food_between_meals_Group = CAEC,
Amount_of_water = CH2O,
Cal_bev_consumes = SCC,
Physical_act_freq = FAF,
Tech_usage_time_Hours = TUE,
consumption_alcohol = CALC,
Mode_of_transport = MTRANS,
Obesity_Level = NObeyesdad
)
head(data,2)
str(data)
data[data == ""] <- NA #Making the blank cells NA
blank_counts <- colSums(is.na(data))
print(blank_counts)
data$Height[is.na(data$Height)] <- mean(data$Height, na.rm = TRUE)
data$Weight[is.na(data$Weight)] <- mean(data$Weight, na.rm = TRUE)
df <- na.omit(data)
cat("Clean data has",dim(df)[1],"rows")
summary(df)
# Boxplot to visualize the distribution of Age
ggplot(df, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
labs(title = "Distribution of Age",
x = "Age",
y = "Frequency") +
theme_minimal()
# Bar plot for "family_history_with_overweight"
ggplot(df, aes(x = family_history_with_overweight)) +
geom_bar(fill = "steelblue") +
labs(title = "Family History with Overweight",
x = "Family History",
y = "Count") +
theme_minimal()
# Bar plot for "Freq_High_Cal_food"
ggplot(df, aes(x = Consumes_High_Cal_food)) +
geom_bar(fill = "steelblue") +
labs(title = "High-Calorie Food Consumption",
x = "Comsumption",
y = "Count") +
theme_minimal()
# Bar plot for "Num_main_meals"
ggplot(df, aes(x = Num_main_meals)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
labs(title = "Distribution of Number of Main Meals",
x = "Number of Main Meals",
y = "Frequency") +
theme_minimal()
# Bar plot for "Consumption_Food_between_meals"
ggplot(df, aes(x = Consumption_Food_between_meals_Group)) +
geom_bar(fill = "steelblue") +
labs(title = "Consumption of Food between Meals",
x = "Consumption",
y = "Frequency") +
theme_minimal()
ggplot(df, aes(x = "", fill = Mode_of_transport)) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
labs(title = "Mode of Transport",
fill = "Mode of Transport") +
theme_minimal()
df <- df %>%
mutate(Obesity_Level = ifelse(Obesity_Level %in% c("Normal_Weight", "Insufficient_Weight"), "Non-Obese", "Obese"))
head(df,2)
# Filter the data to include only rows where isObese is "Obese"
df_obese <- df %>%
filter(Obesity_Level == "Obese")
df_non_obese <- df %>%
filter(Obesity_Level == "Non-Obese")
# Create the bar plot
ggplot(df_obese, aes(x = Gender, fill = Gender)) +
geom_bar() +
labs(title = "Bar Plot of Gender for Obese Individuals",
x = "Gender",
y = "Frequency") +
scale_fill_manual(values = c("Male" = "lightblue", "Female" = "pink"))
ggplot(df_obese, aes(x = Age)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Distribution of Age for Obese Individuals",
x = "Age",
y = "Density")
ggplot(df, aes(x = Obesity_Level, y = Physical_act_freq, fill = Obesity_Level)) +
geom_boxplot() +
labs(title = "Physical Activity Frequency by Obesity Status",
x = "Obese",
y = "Physical Activity Frequency") +
scale_fill_manual(values = c("Non-Obese" = "lightblue", "Obese" = "red"))
ggplot(df, aes(x = Mode_of_transport, fill = Obesity_Level)) +
geom_bar() +
labs(title = "Distribution of Obesity Status by Mode of Transport",
x = "Mode of Transport",
y = "Count") +
scale_fill_manual(values = c("Non-Obese" = "lightblue", "Obese" = "red"))
df <- df %>% mutate(Height = Height/100)
head(df,2)
# Calculating BMI
df$bmi <- df$Weight / (df$Height^2)
# Removing 'Height' and 'Weight' columns
df <- subset(df, select = -c(Height, Weight))
head(df, 2)
reverse_mapping <- c("1" = "rarely", "2" = "sometimes", "3" = "frequently")
df$Veg_consumption_Group <- reverse_mapping(df$Veg_consumption_Group)
log_reg_resuls <- glm(Obesity_Level_Obese ~.,
data=final_df,
family=binomial(link="logit"))
summary(log_reg_resuls, scipen=999)
colnames(final_df)
View(df_non_obese)
View(df)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Freq_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_mealsFrequently=0,
Consumption_Food_between_mealsno=0,
Consumption_Food_between_mealsSometimes=1,
Smoke_Yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
df_Jane$bmi <- df_Jane$Weight / (df_Jane$Height^2)
df_Jane <- subset(df_Jane, select = -c(Height, Weight))
df_Jane
View(df_Jane)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Freq_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_mealsFrequently=0,
Consumption_Food_between_mealsno=0,
Consumption_Food_between_mealsSometimes=1,
Smoke_Yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
df_Jane <- df_Jane %>% mutate(Height = Height/100)
df_Jane$bmi <- df_Jane$Weight / (df_Jane$Height^2)
df_Jane <- subset(df_Jane, select = -c(Height, Weight))
df_Jane
predict(step_model_res, newdata = df_Jane)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("fastDummies")
# install.packages("adabag")
# install.packages("ada")
# install.packages("xgboost")
# install.packages("neuralnet")
# install.packages("e1071")  # svm
# install.packages("naivebayes")
# install.packages("rpart")  # decision tree
# install.packages(rpart.plot)
# install.packages("broom")
# install.packages("data.table")
library(dplyr)
library(fastDummies)
library(ggplot2)
library(caret)
library(randomForest)
library(MASS)
library(data.table)
library(ada)
library(adabag)
library(xgboost)
library(neuralnet)
library(e1071)
library(naivebayes)
library(rpart)
library(rpart.plot)
library(broom)
library(AICcmodavg)
data_org <- read.csv("ObesityDataSet.csv", header = TRUE, sep = ',')
head(data,2)
cat("Initially the dataset has", dim(data)[1], "rows")
data <- data_org %>%
rename(
Consumes_High_Cal_food = FAVC,
Veg_consumption_Group = FCVC,
Num_main_meals = NCP,
Consumption_Food_between_meals_Group = CAEC,
Amount_of_water = CH2O,
Cal_bev_consumes = SCC,
Physical_act_freq = FAF,
Tech_usage_time_Hours = TUE,
consumption_alcohol = CALC,
Mode_of_transport = MTRANS,
Obesity_Level = NObeyesdad
)
head(data,2)
str(data)
data[data == ""] <- NA #Making the blank cells NA
blank_counts <- colSums(is.na(data))
print(blank_counts)
data$Height[is.na(data$Height)] <- mean(data$Height, na.rm = TRUE)
data$Weight[is.na(data$Weight)] <- mean(data$Weight, na.rm = TRUE)
df <- na.omit(data)
cat("Clean data has",dim(df)[1],"rows")
summary(df)
# Boxplot to visualize the distribution of Age
ggplot(df, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
labs(title = "Distribution of Age",
x = "Age",
y = "Frequency") +
theme_minimal()
# Bar plot for "family_history_with_overweight"
ggplot(df, aes(x = family_history_with_overweight)) +
geom_bar(fill = "steelblue") +
labs(title = "Family History with Overweight",
x = "Family History",
y = "Count") +
theme_minimal()
# Bar plot for "Freq_High_Cal_food"
ggplot(df, aes(x = Consumes_High_Cal_food)) +
geom_bar(fill = "steelblue") +
labs(title = "High-Calorie Food Consumption",
x = "Comsumption",
y = "Count") +
theme_minimal()
# Bar plot for "Num_main_meals"
ggplot(df, aes(x = Num_main_meals)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
labs(title = "Distribution of Number of Main Meals",
x = "Number of Main Meals",
y = "Frequency") +
theme_minimal()
# Bar plot for "Consumption_Food_between_meals"
ggplot(df, aes(x = Consumption_Food_between_meals_Group)) +
geom_bar(fill = "steelblue") +
labs(title = "Consumption of Food between Meals",
x = "Consumption",
y = "Frequency") +
theme_minimal()
ggplot(df, aes(x = "", fill = Mode_of_transport)) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
labs(title = "Mode of Transport",
fill = "Mode of Transport") +
theme_minimal()
df <- df %>%
mutate(Obesity_Level = ifelse(Obesity_Level %in% c("Normal_Weight", "Insufficient_Weight"), "Non-Obese", "Obese"))
head(df,2)
# Filter the data to include only rows where isObese is "Obese"
df_obese <- df %>%
filter(Obesity_Level == "Obese")
df_non_obese <- df %>%
filter(Obesity_Level == "Non-Obese")
# Create the bar plot
ggplot(df_obese, aes(x = Gender, fill = Gender)) +
geom_bar() +
labs(title = "Bar Plot of Gender for Obese Individuals",
x = "Gender",
y = "Frequency") +
scale_fill_manual(values = c("Male" = "lightblue", "Female" = "pink"))
ggplot(df_obese, aes(x = Age)) +
geom_density(fill = "lightblue", alpha = 0.7) +
labs(title = "Distribution of Age for Obese Individuals",
x = "Age",
y = "Density")
ggplot(df, aes(x = Obesity_Level, y = Physical_act_freq, fill = Obesity_Level)) +
geom_boxplot() +
labs(title = "Physical Activity Frequency by Obesity Status",
x = "Obese",
y = "Physical Activity Frequency") +
scale_fill_manual(values = c("Non-Obese" = "lightblue", "Obese" = "red"))
ggplot(df, aes(x = Mode_of_transport, fill = Obesity_Level)) +
geom_bar() +
labs(title = "Distribution of Obesity Status by Mode of Transport",
x = "Mode of Transport",
y = "Count") +
scale_fill_manual(values = c("Non-Obese" = "lightblue", "Obese" = "red"))
df <- df %>% mutate(Height = Height/100)
head(df,2)
# Calculating BMI
df$bmi <- df$Weight / (df$Height^2)
# Removing 'Height' and 'Weight' columns
df <- subset(df, select = -c(Height, Weight))
head(df, 2)
reverse_mapping <- c("1" = "rarely", "2" = "sometimes", "3" = "frequently")
df$Veg_consumption_Group <- reverse_mapping(df$Veg_consumption_Group)
predict(step_model_res, newdata = df_Jane)
predict(step_model_res, newdata = df_Jane)
step_model_res <- suppressWarnings(stepAIC(log_reg_resuls, direction = "backward", trace = FALSE))
options(scipen = 999)
summary(step_model_res)
predict(step_model_res, newdata = df_Jane)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Consumes_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_mealsFrequently=0,
Consumption_Food_between_mealsno=0,
Consumption_Food_between_mealsSometimes=1,
Smoke_Yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
df_Jane <- df_Jane %>% mutate(Height = Height/100)
df_Jane$bmi <- df_Jane$Weight / (df_Jane$Height^2)
df_Jane <- subset(df_Jane, select = -c(Height, Weight))
df_Jane
predict(step_model_res, newdata = df_Jane)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Consumes_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_mealsFrequently=0,
Consumption_Food_between_mealsno=0,
Consumption_Food_between_mealsSometimes=1,
SMOKE_yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
df_Jane <- df_Jane %>% mutate(Height = Height/100)
df_Jane$bmi <- df_Jane$Weight / (df_Jane$Height^2)
df_Jane <- subset(df_Jane, select = -c(Height, Weight))
df_Jane
predict(step_model_res, newdata = df_Jane)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Consumes_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_meals_GroupFrequently=0,
Consumption_Food_between_meals_Groupno=0,
Consumption_Food_between_meals_GroupSometimes=1,
SMOKE_yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
df_Jane <- df_Jane %>% mutate(Height = Height/100)
df_Jane$bmi <- df_Jane$Weight / (df_Jane$Height^2)
df_Jane <- subset(df_Jane, select = -c(Height, Weight))
df_Jane
predict(step_model_res, newdata = df_Jane)
step_model_res <- suppressWarnings(stepAIC(log_reg_resuls, direction = "backward", trace = FALSE))
options(scipen = 999)
summary(step_model_res)
predict(step_model_res, newdata = df_Jane,type = "response")
predict_obesity <- function(data_frame, model) {
# Make necessary transformations
data_frame <- data_frame %>% mutate(Height = Height/100)
data_frame$bmi <- data_frame$Weight / (data_frame$Height^2)
data_frame <- subset(data_frame, select = -c(Height, Weight))
# Predict probabilities
predicted_probs <- predict(model, newdata = data_frame, type = "response")
# Apply threshold and classify as "Obese" or "Non-Obese"
predictions <- ifelse(predicted_probs >= 0.5, "Obese", "Non-Obese")
return(predictions)
}
# Example usage
predicted_class <- predict_obesity(df_Jane, step_model_res)
df_Jane = data.frame(
Gender_Male= 0,
Age= 28,
Height = 165,
Weight = 58,
family_history_with_overweight_yes = 0,
Consumes_High_Cal_food_yes = 1,
Veg_consumption_Grouprarely=0,
Veg_consumption_Groupsometimes=1,
NCP = 3,
Consumption_Food_between_meals_GroupFrequently=0,
Consumption_Food_between_meals_Groupno=0,
Consumption_Food_between_meals_GroupSometimes=1,
SMOKE_yes=0,
Amount_of_water=2.5,
Cal_bev_consumes_yes=1,
Physical_act_freq = 2,
Tech_usage_time_Hours=6,
consumption_alcoholno=1,
Mode_of_transportBike=1,
Mode_of_transportMotorbike=0,
Mode_of_transportPublic_Transportation=0,
Mode_of_transportWalking=0
)
predict_obesity <- function(data_frame, model) {
# Make necessary transformations
data_frame <- data_frame %>% mutate(Height = Height/100)
data_frame$bmi <- data_frame$Weight / (data_frame$Height^2)
data_frame <- subset(data_frame, select = -c(Height, Weight))
# Predict probabilities
predicted_probs <- predict(model, newdata = data_frame, type = "response")
# Apply threshold and classify as "Obese" or "Non-Obese"
predictions <- ifelse(predicted_probs >= 0.5, "Obese", "Non-Obese")
return(predictions)
}
# Example usage
predicted_class <- predict_obesity(df_Jane, step_model_res)
print(predicted_class)
predict_obesity <- function(data_frame, model) {
# Make necessary transformations
data_frame <- data_frame %>% mutate(Height = Height/100)
data_frame$bmi <- data_frame$Weight / (data_frame$Height^2)
data_frame <- subset(data_frame, select = -c(Height, Weight))
# Predict probabilities
predicted_probs <- predict(model, newdata = data_frame, type = "response")
# Apply threshold and classify as "Obese" or "Non-Obese"
predictions <- ifelse(predicted_probs >= 0.5, "Obese", "Non-Obese")
return(predictions)
}
predict_obesity <- function(data_frame, model) {
# Make necessary transformations
data_frame <- data_frame %>% mutate(Height = Height/100)
data_frame$bmi <- data_frame$Weight / (data_frame$Height^2)
data_frame <- subset(data_frame, select = -c(Height, Weight))
# Predict probabilities
predicted_probs <- predict(model, newdata = data_frame, type = "response")
# Apply threshold and classify as "Obese" or "Non-Obese"
predictions <- ifelse(predicted_probs >= 0.5, "Obese", "Non-Obese")
return(predictions)
}
